// x√≥a ph·∫ßn ch·∫∑n chuy·ªÉn ti·∫øp

// Th√™m v√†o ƒë·∫ßu file, ngay sau khai b√°o const ƒë·∫ßu ti√™n
document.addEventListener('DOMContentLoaded', function() {
    // ·∫®n card container
    document.getElementById("cardTrangChu").style.display = "none";
    
    // Hi·ªÉn th·ªã container ch·∫•m c√¥ng
    document.getElementById("attendance-container").style.display = "block";
    
    // Set active cho menu ch·∫•m c√¥ng
    setActiveSidebar("menuChamCong");
    
    // Kh·ªüi t·∫°o events v√† hi·ªÉn th·ªã form ch·∫•m c√¥ng
    addAttendanceFunctionEvents();
    showChamCong();
});

// Hi·ªáu ·ª©ng click card
const cards = document.querySelectorAll(".card");
cards.forEach(card => {
  card.addEventListener("click", () => {
    // Kh√¥ng alert n·∫øu l√† card "Qu·∫£n l√Ω ch·∫•m c√¥ng"
    if (!card.classList.contains("card-orange")) {
      alert(`B·∫°n ƒë√£ ch·ªçn: ${card.innerText.trim()}`);
    }
  });
});

const chamCongCard = document.querySelector(".card-orange");
const container = document.getElementById("attendance-container");
const content = document.getElementById("attendance-content");

chamCongCard.addEventListener("click", () => {
  document.getElementById("cardTrangChu").style.display = "none";
  container.style.display = "block";
  setActiveSidebar("menuChamCong");
  addAttendanceFunctionEvents(); // <--- th√™m d√≤ng n√†y
  showChamCong();
});


const buttons = document.querySelectorAll(".attendance-buttons button");

function setActiveButton(activeId) {
  buttons.forEach(btn => {
    if (btn.id === activeId) {
      btn.classList.add("active");
    } else {
      btn.classList.remove("active");
    }
  });
}

document.getElementById("btnChamCong").addEventListener("click", () => {
  setActiveButton("btnChamCong");
  showChamCong();
});
document.getElementById("btnNghiPhep").addEventListener("click", () => {
  setActiveButton("btnNghiPhep");
  showXinNghiPhep();
});
function showXinNghiPhep() {
  content.innerHTML = `
    <h3 style="margin-bottom: 16px;">üìù Xin ngh·ªâ ph√©p</h3>

    <div style="background: white; padding: 20px; border-radius: 12px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); margin-bottom: 24px;">
      <form id="formNghiPhep">
        <div style="display: flex; flex-wrap: wrap; gap: 20px;">
          <div style="flex: 1; min-width: 200px;">
            <label style="font-weight: 600;">Ng√†y b·∫Øt ƒë·∫ßu:</label><br/>
            <input type="date" id="ngayBatDau" required style="width: 100%; padding: 8px 12px; border-radius: 8px; border: 1px solid #ccc;">
          </div>

          <div style="flex: 1; min-width: 200px;">
            <label style="font-weight: 600;">Ng√†y k·∫øt th√∫c:</label><br/>
            <input type="date" id="ngayKetThuc" required style="width: 100%; padding: 8px 12px; border-radius: 8px; border: 1px solid #ccc;">
          </div>
        </div>

        <div style="margin-top: 16px;">
          <label style="font-weight: 600;">L√Ω do ngh·ªâ ph√©p:</label><br/>
          <textarea id="lyDo" rows="3" required style="width: 100%; padding: 10px 12px; border-radius: 8px; border: 1px solid #ccc;"></textarea>
        </div>

        <div style="margin-top: 16px; text-align: right;">
          <button type="submit" id="btnGuiDon" style="
            padding: 10px 20px;
            background-color: #2196f3;
            color: white;
            border: none;
            border-radius: 8px;
            font-weight: bold;
            transition: background-color 0.3s;
          ">üì® G·ª≠i ƒë∆°n ngh·ªâ</button>
        </div>
      </form>
    </div>

    <h4 style="margin-bottom: 12px;">üìú L·ªãch s·ª≠ n·ªôp ƒë∆°n xin ngh·ªâ ph√©p</h4>
    <div style="background: white; border-radius: 12px; overflow: hidden; box-shadow: 0 2px 10px rgba(0,0,0,0.08);">
      <table border="1" style="width: 100%; border-collapse: collapse;">
        <thead>
          <tr style="background-color: #2196f3; color: white;">
            <th>M√£ NV</th>
            <th>T√™n NV</th>
            <th>Ng√†y b·∫Øt ƒë·∫ßu</th>
            <th>Ng√†y k·∫øt th√∫c</th>
            <th>L√Ω do</th>
            <th>Tr·∫°ng th√°i</th>
          </tr>
        </thead>
        <tbody id="nghiPhepList"></tbody>
      </table>
    </div>
  `;

  // üëá Hover cho n√∫t g·ª≠i ƒë∆°n
  const btn = document.getElementById("btnGuiDon");
  btn.addEventListener("mouseover", () => {
    btn.style.backgroundColor = "#4caf50";
  });
  btn.addEventListener("mouseout", () => {
    btn.style.backgroundColor = "#2196f3";
  });

  const form = document.getElementById("formNghiPhep");
  const tbody = document.getElementById("nghiPhepList");
  // L·∫•y l·ªãch s·ª≠ t·ª´ localStorage
  const lichSu = JSON.parse(localStorage.getItem("lichSuNghiPhep")) || [];

  function renderLichSu() {
    tbody.innerHTML = "";
    lichSu.forEach(item => {
      const row = document.createElement("tr");
      row.innerHTML = `
        <td>${item.ma}</td>
        <td>${item.ten}</td>
        <td>${item.batDau}</td>
        <td>${item.ketThuc}</td>
        <td>${item.lyDo}</td>
        <td>${item.trangThai}</td>
      `;
      tbody.appendChild(row);
    });
  }
/////////////////////////////////////////////////////////////////
  renderLichSu(); // render khi load

  form.addEventListener("submit", (e) => {
    e.preventDefault();

    const bd = document.getElementById("ngayBatDau").value;
    const kt = document.getElementById("ngayKetThuc").value;
    const lyDo = document.getElementById("lyDo").value;

    const don = {
      ma: "NV001",
      ten: "Nguy·ªÖn VƒÉn A",
      batDau: bd,
      ketThuc: kt,
      lyDo: lyDo,
      trangThai: "Ch·ªù duy·ªát"
    };

    lichSu.push(don);
    localStorage.setItem("lichSuNghiPhep", JSON.stringify(lichSu));
    renderLichSu();
    form.reset();
  });
}


let daChamCong = false;
function showChamCong() {
  let gioDen = "";
  let currentRow = null;

  const contentHTML = `
    <div style="text-align: center; margin-bottom: 30px;">
      <button id="nutChamCong" style="
        padding: 20px 50px;
        font-size: 22px;
        font-weight: bold;
        background-color: #2196f3;
        color: white;
        border: none;
        border-radius: 14px;
        cursor: pointer;
        transition: background-color 0.3s, transform 0.2s;
        box-shadow: 0 4px 14px rgba(33, 150, 243, 0.4);
      ">Ch·∫•m c√¥ng ƒë·∫øn</button>
    </div>

    <table border="1" style="width: 100%; border-collapse: collapse;">
      <thead>
        <tr>
          <th>Ng√†y</th>
          <th>Gi·ªù ƒë·∫øn</th>
          <th>Gi·ªù v·ªÅ</th>
          <th>Tr·∫°ng th√°i</th>
        </tr>
      </thead>
      <tbody id="bangChamCong"></tbody>
    </table>

    <div id="lichSuChamCongBox" style="margin-top: 40px; padding-top: 20px; border-top: 2px dashed #ccc;">
      <h3 style="margin-bottom: 12px;">üìÖ L·ªãch s·ª≠ ch·∫•m c√¥ng</h3>
      <div style="margin-bottom: 16px; display: flex; gap: 12px; flex-wrap: wrap;">
        <label>T·ª´ ng√†y: <input type="date" id="tuNgayLichSu" /></label>
        <label>ƒê·∫øn ng√†y: <input type="date" id="denNgayLichSu" /></label>
        <button id="btnApDungLichSu" style="padding: 8px 16px; background: #2196f3; color: white; border: none; border-radius: 6px;">√Åp d·ª•ng</button>
      </div>

      <table border="1" style="width: 100%; border-collapse: collapse;">
        <thead>
          <tr>
            <th>Ng√†y</th>
            <th>Gi·ªù ƒë·∫øn</th>
            <th>Gi·ªù v·ªÅ</th>
            <th>Tr·∫°ng th√°i</th>
          </tr>
        </thead>
        <tbody id="bangLichSuChamCong"></tbody>
      </table>
    </div>
  `;

  content.innerHTML = contentHTML;

  const nutChamCong = document.getElementById("nutChamCong");
  nutChamCong.addEventListener("mouseenter", () => {
    if (!daChamCongDen) {
      nutChamCong.innerText = "Ch·∫•m c√¥ng v·ªÅ";
      nutChamCong.style.backgroundColor = "#f44336";
      nutChamCong.style.boxShadow = "0 4px 14px rgba(244, 67, 54, 0.4)";
    }
  });
  
  nutChamCong.addEventListener("mouseleave", () => {
    if (!daChamCongDen) {
      nutChamCong.innerText = "Ch·∫•m c√¥ng ƒë·∫øn";
      nutChamCong.style.backgroundColor = "#2196f3";
      nutChamCong.style.boxShadow = "0 4px 14px rgba(33, 150, 243, 0.4)";
    }
  });
  
  
  const tbody = document.getElementById("bangChamCong");

  const chamCongData = JSON.parse(localStorage.getItem("chamCongData")) || [];
  const chamCongStatus = JSON.parse(localStorage.getItem("chamCongStatus")) || {
    daChamCongDen: false,
    gioDen: null
  };

  const todayStr = new Date().toISOString().split("T")[0]; // YYYY-MM-DD

  chamCongData.forEach(item => {
    if (item.ngay === todayStr) {
      const row = document.createElement("tr");
      row.innerHTML = `
        <td>${item.ngay}</td>
        <td>${item.gioDen}</td>
        <td class="gioVe">${item.gioVe || "-"}</td>
        <td class="trangThai ${item.classTrangThai || ""}">${item.trangThai}</td>
      `;
      tbody.appendChild(row);
    }
  });
  

  let daChamCongDen = chamCongStatus.daChamCongDen;
  if (daChamCongDen) {
    nutChamCong.innerText = "Ch·∫•m c√¥ng v·ªÅ";
    nutChamCong.style.backgroundColor = "#f44336";
    nutChamCong.style.boxShadow = "0 4px 14px rgba(244, 67, 54, 0.4)";
    gioDen = new Date(chamCongStatus.gioDen);
  }

  nutChamCong.addEventListener("click", () => {
    const now = new Date();
    const gioStr = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    const ngayStr = now.toISOString().split("T")[0]; // YYYY-MM-DD


    if (!daChamCongDen) {
      gioDen = now;
      daChamCongDen = true;

      nutChamCong.innerText = "Ch·∫•m c√¥ng v·ªÅ";
      nutChamCong.style.backgroundColor = "#f44336";
      nutChamCong.style.boxShadow = "0 4px 14px rgba(244, 67, 54, 0.4)";

      currentRow = document.createElement("tr");
      currentRow.innerHTML = `
        <td>${ngayStr}</td>
        <td>${gioStr}</td>
        <td class="gioVe">-</td>
        <td class="trangThai">ƒêang l√†m</td>
      `;
      tbody.appendChild(currentRow);

      chamCongData.push({
        ngay: ngayStr,
        gioDen: gioStr,
        gioVe: "",
        trangThai: "ƒêang l√†m",
        classTrangThai: ""
      });

      localStorage.setItem("chamCongData", JSON.stringify(chamCongData));
      localStorage.setItem("chamCongStatus", JSON.stringify({
        daChamCongDen: true,
        gioDen: gioDen.toISOString()
      }));

    } else {
      const gioVe = now;
      const gioVeStr = gioVe.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

      const gioDenHour = gioDen.getHours();
      const gioVeHour = gioVe.getHours();

      let trangThai = "";
      let classTrangThai = "";

      if (gioDenHour >= 8) {
        trangThai = "Ch·∫•m c√¥ng mu·ªôn";
        classTrangThai = "trangThai-muon";
      } else if (gioVeHour < 17) {
        trangThai = "Thi·∫øu gi·ªù l√†m";
        classTrangThai = "trangThai-thieu";
      } else {
        trangThai = "ƒê√£ ch·∫•m c√¥ng th√†nh c√¥ng";
        classTrangThai = "trangThai-thanhcong";
      }

      const veCell = tbody.lastChild.querySelector(".gioVe");
      const trangThaiCell = tbody.lastChild.querySelector(".trangThai");
      veCell.innerText = gioVeStr;
      trangThaiCell.innerText = trangThai;
      trangThaiCell.classList.add(classTrangThai);

      const last = chamCongData[chamCongData.length - 1];
      last.gioVe = gioVeStr;
      last.trangThai = trangThai;
      last.classTrangThai = classTrangThai;

      localStorage.setItem("chamCongData", JSON.stringify(chamCongData));
      localStorage.setItem("chamCongStatus", JSON.stringify({
        daChamCongDen: false,
        gioDen: null
      }));

      daChamCongDen = false;
      nutChamCong.innerText = "Ch·∫•m c√¥ng ƒë·∫øn";
      nutChamCong.style.backgroundColor = "#2196f3";
      nutChamCong.style.boxShadow = "0 4px 14px rgba(33, 150, 243, 0.4)";
    }
  });

  // S·ª± ki·ªán √°p d·ª•ng l·ªãch s·ª≠
  document.getElementById("btnApDungLichSu").addEventListener("click", () => {
    const tuNgay = document.getElementById("tuNgayLichSu").value;
    const denNgay = document.getElementById("denNgayLichSu").value;
    const tbodyLichSu = document.getElementById("bangLichSuChamCong");

    if (!tuNgay || !denNgay) {
      alert("üõë Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c.");
      return;
    }

    const tu = new Date(tuNgay);
    const den = new Date(denNgay);

    const loc = chamCongData.filter(item => {
      const ngayItem = new Date(item.ngay);
      return ngayItem >= tu && ngayItem <= den;
    });

    tbodyLichSu.innerHTML = "";
    loc.forEach(item => {
      const row = document.createElement("tr");
      row.innerHTML = `
        <td>${item.ngay}</td>
        <td>${item.gioDen}</td>
        <td>${item.gioVe || "-"}</td>
        <td class="${item.classTrangThai || ""}">${item.trangThai}</td>
      `;
      tbodyLichSu.appendChild(row);
    });
  });
}

const danhSachNhanVien = {
  NV001: { ten: "Nguy·ªÖn VƒÉn A", phongBan: "Ph√≤ng IT" },
  NV002: { ten: "Tr·∫ßn Th·ªã B", phongBan: "Ph√≤ng K·∫ø to√°n" },
  NV003: { ten: "L√™ VƒÉn C", phongBan: "Ph√≤ng Nh√¢n s·ª±" }
};
document.getElementById("menuChamCong").addEventListener("click", e => {
  e.preventDefault();
  setActiveSidebar("menuChamCong");
  document.getElementById("cardTrangChu").style.display = "none";
  container.style.display = "block";
  addAttendanceFunctionEvents(); // <--- th√™m d√≤ng n√†y
  showChamCong();
});
document.getElementById("menuTrangChu").addEventListener("click", e => {
  e.preventDefault();
  setActiveSidebar("menuTrangChu");
  document.getElementById("cardTrangChu").style.display = "flex";
  container.style.display = "none";
});
document.getElementById("btnTongHopChamCong").addEventListener("click", () => {
  setActiveButton("btnTongHopChamCong");
  showTongHopChamCong();
});
document.getElementById("btnTongHopNghiPhep").addEventListener("click", () => {
  setActiveButton("btnTongHopNghiPhep");
  showTongHopNghiPhep();
});
document.getElementById("btnBaoCao").addEventListener("click", () => {
  setActiveButton("btnBaoCao");
  showBaoCao();
});
document.getElementById("loaiBaoCao").addEventListener("change", (e) => {
  const thongKeBox = document.getElementById("chonLoaiThongKe");
  thongKeBox.style.display = e.target.value === "thongke" ? "block" : "none";
});




function addAttendanceFunctionEvents() {
  const btnChamCong = document.getElementById("btnChamCong");
  const btnNghiPhep = document.getElementById("btnNghiPhep");

  const allButtons = [btnChamCong, btnNghiPhep];

  function setActiveButton(activeId) {
    allButtons.forEach(btn => {
      if (btn) {
        if (btn.id === activeId) {
          btn.classList.add("active");
        } else {
          btn.classList.remove("active");
        }
      }
    });
  }

  if (btnChamCong) {
    btnChamCong.addEventListener("click", () => {
      setActiveButton("btnChamCong");
      showChamCong();
    });
  }

  if (btnNghiPhep) {
    btnNghiPhep.addEventListener("click", () => {
      setActiveButton("btnNghiPhep");
      showXinNghiPhep();
    });
  }
}



function showTongHopChamCong() {
  content.innerHTML = `
    <h3 style="margin-bottom: 16px;">T·ªïng h·ª£p d·ªØ li·ªáu ch·∫•m c√¥ng</h3>

    <div style="display: flex; gap: 16px; flex-wrap: wrap; margin-bottom: 20px;">
      <select id="locPhong">
        <option value="">-- L·ªçc ph√≤ng ban --</option>
        <option>Ph√≤ng K·∫ø to√°n</option>
        <option>Ph√≤ng Nh√¢n s·ª±</option>
        <option>Ph√≤ng IT</option>
      </select>

      <select id="locThang">
        <option value="">-- L·ªçc th√°ng --</option>
        ${[...Array(12)].map((_, i) => `<option value="${i+1}">Th√°ng ${i + 1}</option>`).join("")}
      </select>

      <select id="locNam">
        <option value="">-- L·ªçc nƒÉm --</option>
        <option>2024</option>
        <option>2025</option>
      </select>

      <select id="locTrangThai">
        <option value="">-- L·ªçc tr·∫°ng th√°i --</option>
        <option>ƒê√£ ch·∫•m c√¥ng th√†nh c√¥ng</option>
        <option>Ch·∫•m c√¥ng mu·ªôn</option>
        <option>Thi·∫øu gi·ªù l√†m</option>
      </select>

      <button id="btnApDung" style="padding: 8px 16px; background: #2196f3; color: white; border: none; border-radius: 6px;">√Åp d·ª•ng</button>
      <button id="btnResetLoc" style="padding: 8px 16px; background: #f44336; color: white; border: none; border-radius: 6px;">Reset</button>

    </div>

    <table border="1" style="width: 100%; border-collapse: collapse;">
      <thead>
        <tr>
          <th>M√£ NV</th>
          <th>T√™n NV</th>
          <th>Ph√≤ng ban</th>
          <th>Ng√†y</th>
          <th>Gi·ªù ƒë·∫øn</th>
          <th>Gi·ªù v·ªÅ</th>
          <th>Tr·∫°ng th√°i</th>
        </tr>
      </thead>
      <tbody id="bangTongHopChamCong"></tbody>
    </table>
  `;

  const tbody = document.getElementById("bangTongHopChamCong");

  // H√†m render d·ªØ li·ªáu theo b·ªô l·ªçc
  function renderBang(data) {
    tbody.innerHTML = "";
    data.forEach((item, index) => {
      const maNV = Object.keys(danhSachNhanVien)[index % 3]; // L·∫∑p l·∫°i NV001, NV002, NV003
      const nv = danhSachNhanVien[maNV];
      const row = document.createElement("tr");
      row.innerHTML = `
        <td>${maNV}</td>
        <td>${nv.ten}</td>
        <td>${nv.phongBan}</td>
        <td>${item.ngay}</td>
        <td>${item.gioDen}</td>
        <td>${item.gioVe || "-"}</td>
        <td class="${item.classTrangThai || ""}">${item.trangThai}</td>
      `;
      tbody.appendChild(row);
    });
  }

  const duLieu = JSON.parse(localStorage.getItem("chamCongData")) || [];
  renderBang(duLieu);

  document.getElementById("btnApDung").addEventListener("click", () => {
    const phong = document.getElementById("locPhong").value;
    const thang = document.getElementById("locThang").value;
    const nam = document.getElementById("locNam").value;
    const trangThai = document.getElementById("locTrangThai").value;

    const loc = duLieu.filter((item, i) => {
      const maNV = Object.keys(danhSachNhanVien)[i % 3];
      const nv = danhSachNhanVien[maNV];
      const ngay = new Date(item.ngay);
      const thangItem = ngay.getMonth() + 1;
      const namItem = ngay.getFullYear();

      return (!phong || nv.phongBan === phong)
        && (!thang || thangItem == thang)
        && (!nam || namItem == nam)
        && (!trangThai || item.trangThai === trangThai);
    });

    renderBang(loc);
  });
  document.getElementById("btnResetLoc").addEventListener("click", () => {
    document.getElementById("locPhong").value = "";
    document.getElementById("locThang").value = "";
    document.getElementById("locNam").value = "";
    document.getElementById("locTrangThai").value = "";
  
    renderBang(duLieu); // Hi·ªán l·∫°i t·∫•t c·∫£ d·ªØ li·ªáu
  });
  
}
function showTongHopNghiPhep() {
  content.innerHTML = `
    <h3 style="margin-bottom: 16px;">üìú Danh s√°ch ƒë∆°n xin ngh·ªâ ph√©p</h3>


    <div style="display: flex; gap: 16px; flex-wrap: wrap; margin-bottom: 20px;">
      <select id="locPhongNP">
        <option value="">-- L·ªçc ph√≤ng ban --</option>
        <option>Ph√≤ng K·∫ø to√°n</option>
        <option>Ph√≤ng Nh√¢n s·ª±</option>
        <option>Ph√≤ng IT</option>
      </select>

      <select id="locThangNP">
        <option value="">-- L·ªçc th√°ng --</option>
        ${[...Array(12)].map((_, i) => `<option value="${i + 1}">Th√°ng ${i + 1}</option>`).join("")}
      </select>

      <select id="locNamNP">
        <option value="">-- L·ªçc nƒÉm --</option>
        <option>2024</option>
        <option>2025</option>
      </select>

      <select id="locTrangThaiNP">
        <option value="">-- L·ªçc tr·∫°ng th√°i --</option>
        <option>Ph√™ duy·ªát</option>
        <option>Kh√¥ng ph√™ duy·ªát</option>
      </select>

      <button id="btnApDungNP" style="padding: 8px 16px; background: #2196f3; color: white; border: none; border-radius: 6px;">√Åp d·ª•ng</button>
      <button id="btnResetLocNP" style="padding: 8px 16px; background: #f44336; color: white; border: none; border-radius: 6px;">Reset</button>
    </div>

    <table border="1" style="width: 100%; border-collapse: collapse;">
      <thead>
        <tr>
          <th>M√£ NV</th>
          <th>T√™n NV</th>
          <th>Ph√≤ng ban</th>
          <th>Ng√†y b·∫Øt ƒë·∫ßu</th>
          <th>Ng√†y k·∫øt th√∫c</th>
          <th>L√Ω do</th>
          <th>Tr·∫°ng th√°i</th>
        </tr>
      </thead>
      <tbody id="bangTongHopNghiPhep"></tbody>
    </table>

    <div style="text-align: right; margin-top: 16px;">
      <button id="btnLuuNP" style="padding: 10px 20px; background-color: #4caf50; color: white; border: none; border-radius: 6px;">L∆∞u</button>
    </div>
  `;

  const tbody = document.getElementById("bangTongHopNghiPhep");

  // D·ªØ li·ªáu gi·∫£ l·∫≠p
  let duLieuNP = [
    {
      ma: "NV001", ten: "Nguy·ªÖn VƒÉn A", phong: "Ph√≤ng IT",
      tu: "2025-04-10", den: "2025-04-12", lyDo: "V·ªÅ qu√™", trangThai: "Ph√™ duy·ªát"
    },
    {
      ma: "NV002", ten: "Tr·∫ßn Th·ªã B", phong: "Ph√≤ng K·∫ø to√°n",
      tu: "2025-04-11", den: "2025-04-13", lyDo: "B·ªánh", trangThai: "Kh√¥ng ph√™ duy·ªát"
    },
    {
      ma: "NV003", ten: "L√™ VƒÉn C", phong: "Ph√≤ng Nh√¢n s·ª±",
      tu: "2025-04-05", den: "2025-04-08", lyDo: "ƒêi du l·ªãch", trangThai: "Ph√™ duy·ªát"
    }
  ];

  function renderBang(data) {
    tbody.innerHTML = "";
    data.forEach((item, index) => {
      const row = document.createElement("tr");
      row.innerHTML = `
        <td>${item.ma}</td>
        <td>${item.ten}</td>
        <td>${item.phong}</td>
        <td>${item.tu}</td>
        <td>${item.den}</td>
        <td>${item.lyDo}</td>
        <td>
          <select data-index="${index}">
            <option ${item.trangThai === "Ph√™ duy·ªát" ? "selected" : ""}>Ph√™ duy·ªát</option>
            <option ${item.trangThai === "Kh√¥ng ph√™ duy·ªát" ? "selected" : ""}>Kh√¥ng ph√™ duy·ªát</option>
          </select>
        </td>
      `;
      tbody.appendChild(row);
    });
  }

  renderBang(duLieuNP);

  document.getElementById("btnApDungNP").addEventListener("click", () => {
    const phong = document.getElementById("locPhongNP").value;
    const thang = document.getElementById("locThangNP").value;
    const nam = document.getElementById("locNamNP").value;
    const trangThai = document.getElementById("locTrangThaiNP").value;

    const loc = duLieuNP.filter(item => {
      const ngayBD = new Date(item.tu);
      const thangItem = ngayBD.getMonth() + 1;
      const namItem = ngayBD.getFullYear();

      return (!phong || item.phong === phong)
        && (!thang || thangItem == thang)
        && (!nam || namItem == nam)
        && (!trangThai || item.trangThai === trangThai);
    });

    renderBang(loc);
  });

  document.getElementById("btnResetLocNP").addEventListener("click", () => {
    document.getElementById("locPhongNP").value = "";
    document.getElementById("locThangNP").value = "";
    document.getElementById("locNamNP").value = "";
    document.getElementById("locTrangThaiNP").value = "";
    renderBang(duLieuNP);
  });

  // üëâ S·ª± ki·ªán L∆ØU: c·∫≠p nh·∫≠t tr·∫°ng th√°i t·ª´ c√°c dropdown trong b·∫£ng
  document.getElementById("btnLuuNP").addEventListener("click", () => {
    const selects = tbody.querySelectorAll("select");
    selects.forEach(select => {
      const index = select.getAttribute("data-index");
      const newTrangThai = select.value;
      duLieuNP[index].trangThai = newTrangThai;
    });

    alert("‚úÖ ƒê√£ l∆∞u tr·∫°ng th√°i duy·ªát th√†nh c√¥ng!");
  });
}
function showBaoCao() {
  content.innerHTML = `
    <h3 style="margin-bottom: 16px;">B√°o c√°o t·ªïng h·ª£p</h3>

    <div style="margin-bottom: 16px;">
      <label><strong>Ch·ªçn lo·∫°i b√°o c√°o:</strong></label><br/>
      <select id="loaiBaoCao" style="padding: 8px; margin-top: 6px;">
        <option value="chamcong">B√°o c√°o ch·∫•m c√¥ng</option>
        <option value="nghiphep">B√°o c√°o ngh·ªâ ph√©p</option>
        <option value="thongke">Th·ªëng k√™</option>
      </select>
    </div>

    <div id="chonLoaiThongKe" style="display: none; margin-bottom: 16px;">
      <label><strong>Ch·ªçn lo·∫°i th·ªëng k√™:</strong></label><br/>
      <select id="loaiThongKe" style="padding: 8px; margin-top: 6px;">
        <option value="chamcong">Th·ªëng k√™ ch·∫•m c√¥ng</option>
        <option value="nghiphep">Th·ªëng k√™ ngh·ªâ ph√©p</option>
      </select>
    </div>

    <div id="chonKieuBieuDo" style="display: none; margin-bottom: 16px;">
      <label><strong>Ch·ªçn ki·ªÉu bi·ªÉu ƒë·ªì:</strong></label><br/>
      <select id="kieuBieuDo" style="padding: 8px; margin-top: 6px;">
        <option value="pie">Bi·ªÉu ƒë·ªì tr√≤n (Pie)</option>
        <option value="doughnut">Bi·ªÉu ƒë·ªì b√°nh r·ªóng (Doughnut)</option>
        <option value="bar">Bi·ªÉu ƒë·ªì c·ªôt (Bar)</option>
      </select>
    </div>

    <div style="display: flex; gap: 16px; flex-wrap: wrap; margin-bottom: 20px;">
      <select id="locPhongBC">
        <option value="">-- L·ªçc ph√≤ng ban --</option>
        <option>Ph√≤ng K·∫ø to√°n</option>
        <option>Ph√≤ng Nh√¢n s·ª±</option>
        <option>Ph√≤ng IT</option>
      </select>

      <select id="locThangBC">
        <option value="">-- L·ªçc th√°ng --</option>
        ${[...Array(12)].map((_, i) => `<option value="${i + 1}">Th√°ng ${i + 1}</option>`).join("")}
      </select>

      <select id="locNamBC">
        <option value="">-- L·ªçc nƒÉm --</option>
        <option>2024</option>
        <option>2025</option>
      </select>

      <button id="btnApDungBC" style="padding: 8px 16px; background: #2196f3; color: white; border: none; border-radius: 6px;">T·∫°o b√°o c√°o</button>
    </div>

    <div id="baoCaoTableArea"></div>
  `;

  const loaiBaoCaoSelect = document.getElementById("loaiBaoCao");
  loaiBaoCaoSelect.addEventListener("change", (e) => {
    const thongKeBox = document.getElementById("chonLoaiThongKe");
    const bieuDoBox = document.getElementById("chonKieuBieuDo");
    const isThongKe = e.target.value === "thongke";
    thongKeBox.style.display = isThongKe ? "block" : "none";
    bieuDoBox.style.display = isThongKe ? "block" : "none";
  });

  document.getElementById("btnApDungBC").addEventListener("click", () => {
    const loai = document.getElementById("loaiBaoCao").value;
    const phong = document.getElementById("locPhongBC").value;
    const thang = document.getElementById("locThangBC").value;
    const nam = document.getElementById("locNamBC").value;
    const area = document.getElementById("baoCaoTableArea");
    area.innerHTML = "";

    if (loai === "thongke") {
      const loaiTK = document.getElementById("loaiThongKe").value;
      const kieu = document.getElementById("kieuBieuDo").value;
      area.innerHTML = `
        <h4>Bi·ªÉu ƒë·ªì th·ªëng k√™: ${loaiTK === "chamcong" ? "Ch·∫•m c√¥ng" : "Ngh·ªâ ph√©p"}</h4>
        <div style="max-width: 600px; margin: auto;">
          <canvas id="bieuDoThongKe" height="300"></canvas>
        </div>
      `;

      setTimeout(() => {
        veBieuDoThongKe(loaiTK, phong, thang, nam, kieu);
      }, 100);
    }
  });
}

function veBieuDoThongKe(loaiTK, phong, thang, nam, kieu = "pie") {
  const canvas = document.getElementById("bieuDoThongKe");
  if (!canvas) return;
  const ctx = canvas.getContext("2d");

  if (loaiTK === "chamcong") {
    const duLieu = JSON.parse(localStorage.getItem("chamCongData")) || [];

    const loc = duLieu.filter((item, i) => {
      const maNV = Object.keys(danhSachNhanVien)[i % 3];
      const nv = danhSachNhanVien[maNV];
      const ngay = new Date(item.ngay);
      const thangItem = ngay.getMonth() + 1;
      const namItem = ngay.getFullYear();

      return (!phong || nv.phongBan === phong)
        && (!thang || thangItem == thang)
        && (!nam || namItem == nam);
    });

    let muon = 0, thanhCong = 0, thieu = 0;
    loc.forEach(item => {
      if (item.trangThai.includes("mu·ªôn")) muon++;
      else if (item.trangThai.includes("thi·∫øu")) thieu++;
      else if (item.trangThai.includes("th√†nh c√¥ng")) thanhCong++;
    });

    new Chart(ctx, {
      type: kieu,
      data: {
        labels: ["Mu·ªôn", "Thi·∫øu gi·ªù", "Th√†nh c√¥ng"],
        datasets: [{
          data: [muon, thieu, thanhCong],
          backgroundColor: ["#f44336", "#ff9800", "#4caf50"]
        }]
      }
    });
  }

  if (loaiTK === "nghiphep") {
    const duLieuNP = [
      { ma: "NV001", phong: "Ph√≤ng IT", tu: "2025-04-10", trangThai: "Ph√™ duy·ªát" },
      { ma: "NV002", phong: "Ph√≤ng K·∫ø to√°n", tu: "2025-04-11", trangThai: "Kh√¥ng ph√™ duy·ªát" },
      { ma: "NV003", phong: "Ph√≤ng Nh√¢n s·ª±", tu: "2025-04-05", trangThai: "Ph√™ duy·ªát" }
    ];

    const loc = duLieuNP.filter(item => {
      const ngayBD = new Date(item.tu);
      const thangItem = ngayBD.getMonth() + 1;
      const namItem = ngayBD.getFullYear();

      return (!phong || item.phong === phong)
        && (!thang || thangItem == thang)
        && (!nam || namItem == nam);
    });

    let pheDuyet = 0, khongDuyet = 0;
    loc.forEach(item => {
      if (item.trangThai === "Ph√™ duy·ªát") pheDuyet++;
      else khongDuyet++;
    });

    new Chart(ctx, {
      type: kieu,
      data: {
        labels: ["Ph√™ duy·ªát", "Kh√¥ng ph√™ duy·ªát"],
        datasets: [{
          data: [pheDuyet, khongDuyet],
          backgroundColor: ["#4caf50", "#f44336"]
        }]
      }
    });
  }
}




